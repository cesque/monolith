import Head from 'next/head'
import React from 'react'
import Footer from '../components/Footer.js'
import Header from '../components/Header'
import { getPosts, getPost, getDraftPosts, uploadOrFetchMetaImage } from '../lib/posts'

import config from '../lib/config'

import styles from '../styles/post.module.scss'
import { getMetaData } from '../lib/meta.js'

const elementsWithChildren = ['UL', 'OL']

export async function getStaticPaths(context) {
    let posts = await getPosts()

    let paths = []
    
    for(let post of posts) {
        // generate and save thumbnail image

        paths.push({
            params: {
                slug: [ post.slug ],
            }
        })
    }

    if(!process.env.VERCEL) {
        let drafts = await getDraftPosts()

        for(let post of drafts) {
            paths.push({
                params: {
                    slug: [ post.slug, 'draft' ]
                }
            })
        }
    }

    return {
        paths,
        fallback: false,
    }
}

function getElements(post) {
    let elements = []

    let body = post.data.window.document.body
    for(let element of body.childNodes) {
        let parsed = getElement(element)

        if(parsed) {
            elements.push(parsed)
        } 
    }

    return elements
}

function getElement(element) {
    if(!element.tagName) {
        return null
    }
    let attributes = {}
    for(let attribute of [...element.attributes]) {
        attributes[attribute.name] = attribute.value
    }
    
    let children = []
    if(elementsWithChildren.includes(element.tagName)) {
        for(let child of element.childNodes) {
            children.push(getElement(child))
        }
    }

    return {
        tag: element.tagName.toLowerCase(),
        content: element.innerHTML,
        attributes,
        children,
    }
}

export async function getStaticProps(context) {
    let slug = context.params.slug[0]
    const post = await getPost(slug, context.params.slug[1] == 'draft')

    let elements = getElements(post)

    if (!post) {
        return {
            notFound: true,
        }
    }

    let metaImage = await uploadOrFetchMetaImage(post.slug)

    delete post.data

    return {
        props: {
            post,
            elements,
            context,
            metaImage
        },
    }
}



export default class PostPage extends React.Component {
    constructor(props) {
        super(props)

        this.renderElement = this.renderElement.bind(this)
    }

    renderElement(element, index) {
        let content = { '__html': element.content }
        let attributes = element.attributes
        if(attributes.class) {
            attributes.className = attributes.class
            delete attributes.class
        }
    
        let extractClasses = { 
            'kg-width-wide': 'wide',
            'kg-embed-card': 'embed',
        }
    
        let bubbledClasses = Object.keys(extractClasses).filter(key => {
            return attributes.className && attributes.className.includes(key)
        }).map(key => extractClasses[key])
    
        let output = null
        switch(element.tag) {
            case 'ol': output = <ol {...element.attributes}>
                    { element.children.map(this.renderElement) }
                </ol>
                break
            case 'ul': output = <ul {...element.attributes}>
                    { element.children.map(this.renderElement) }
                </ul>
                break
            case 'hr': output = <hr />
                break
            default:
                let Tag = element.tag
                output = <Tag  { ...element.attributes } dangerouslySetInnerHTML={ content } />
                break
        }
    
        return <div key={ index } className={ `element-container ${ element.tag } ${ bubbledClasses.join(' ') }` }>
            { output }
        </div>
    }

    render() {
        return <div className={ styles.container }>
            <Head>
                <title>monolith ‚èµ { this.props.post.title }</title>
                {/* <meta name="description" content="Generated by create next app" /> */}
                <link rel="icon" href="/favicon.ico" />

                { getMetaData(this.props.post.title, 'article', this.props.metaImage) }

            </Head>
        
            <Header post={ this.props.post } />

            <main className={ styles.post }>
                <header className={ styles.header }>
                    <h2>{ this.props.post.title }</h2>
                </header>
                <section className={ `ghost-content ${styles.content}`}>
                    { this.props.elements.map(this.renderElement) }
                </section>
            </main>

            <Footer post={ this.props.post } />
        </div>
    }
}
